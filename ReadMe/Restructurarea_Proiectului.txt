
	Restructurarea Proiectului



 (1) Cream Folder-ul 'models' 
	=>care va Contine Toate Modelele

 (1.1) In care Cream Fieaierul 'modules/clienti.js':
______________________________________________________

// INCARCARI (IMPORTURI):
//----------------------------------------------------
// (IMP-4) IMPORTAREA 'JOI'
const Joi = require('joi');

//----------------------------------------------------
// (IMP-3) IMPORTAREA 'MONGOOSE'
const mongoose = require('mongoose');



//----------------------------------------------------
// MODELULUI 'CLIENT' CU DEF. 'SCHEMEI':
//----------------------------------------------------
const Client = mongoose.model('Client', new mongoose.Schema({
    nume: {
        type: String,
        required: true,
        minlength: 5,
        maxlength: 50
    },

    esteAur: {
        type: Boolean,
        default: false
    },

    telefon: {
        type: String,
        required: true,
        minlength: 5,
        maxlength: 50
    }
}));
//----------------------------------------------------




//----------------------------------------------------
// FUNC. 'VALIDARECLIENT)'
//----------------------------------------------------
function validareClient(client) {
    // LOGICA: VALIDARE CLIENT
    // DEF. 'SCHEMEI' = 'OBIECT':
    const schema = {
        nume: Joi.string().min(5).max(50).required(),
        telefon: Joi.string().min(5).max(50).required(),
        esteAur: Joi.boolean()
    };


    // RETURNAREA - APELARI MET. 'VALIDATE()':
    return Joi.validate(client, schema);
};
//----------------------------------------------------



//----------------------------------------------------
// EXPORTARE OBIECTULUI 'ROUTER'
//----------------------------------------------------
exports.Client = Client;
exports.validare = validareClient;
______________________________________________________







(1.2) Modificam Fieaierul 'routes/clienti.js':
______________________________________________________

// INCARCARI (IMPORTURI):
//----------------------------------------------------
// (IMP-4) IMPORTAREA 'MODEL/CLIENT.JS'  
//         (RETURNEAZA '.Client' SI '.validare')
const { Client, validare } = require('../models/clienti');

///----------------------------------------------------
// (IMP-3) IMPORTAREA 'MONGOOSE'
const mongoose = require('mongoose');

//----------------------------------------------------
// (IMP-1) IMPORTAREA MODULULUI 'EXPRESS'
const express = require('express');

//----------------------------------------------------
// (IMP-2) OBIECTUL 'ROUTER' - APELAREA FUNC. 'EXPRESS.RIUTER()'
const router = express.Router();







///----------------------------------------------------
// RUTA 1.1: GET('/')
//----------------------------------------------------
router.get('/', async(req, res) => {
    // RETURNARE 'CLIENT' & 'SORTARE' DUPA 'NUME':
    const clienti = await Client.find().sort('nume');

    // RASPUNSUL - MATRICE DE OBIECTE:
    res.send(clienti);
});
//----------------------------------------------------







//----------------------------------------------------
// RUTA 2: POST('/')
//----------------------------------------------------
router.post('/', async(req, res) => {

    // DESTRUCTURAREA OBIECTELOR - APELAREA FUNC. 'VALIDAREGEN()'
    const { error } = validare(req.body);

    // LOGICA:  DACA 'CLIENTUL ESTE INVALID' -> RETURNAM '400' (CERERE ERONATA)
    // VERIFICAREA VALOAREI 'REZULTAT' -> A PROP. 'ERROR'
    if (error)
    //  RETURNAM 'EROAREA CU STATREA - 400' CATRE 'CLIENT':
        return res.status(400).send(error.details[0].message);


    // CREARE OBIECTUL 'CLIENT':
    let client = new Client({
        nume: req.body.nume,
        telefon: req.body.telefon,
        esteAur: req.body.esteAur
    });


    //     // ADAUGAM OBIECTUL 'CURS' -> IN MATRICEA 'CURSURI':
    // SALVAREA IN BAZA DE DATE:
    client = await client.save();

    // RETURNAREA 'OBIECTULUI' CATRE 'CLIENT':
    res.send(client);
});
//----------------------------------------------------







//----------------------------------------------------
// RUTA 3: PUT('/:ID') -- PT. 'UPGRADARE'
//----------------------------------------------------
router.put('/:id', async(req, res) => {
    // APELAREA FUNC. 'VALIDARE CLIENT()':
    const { error } = validare(req.body);

    // LOGICA:  DACA 'CLIENTUL ESTE INVALID' -> RETURNAM '400' (CERERE ERONATA)
    // VERIFICAREA VALOAREI 'REZULTAT' -> A PROP. 'ERROR'
    if (error) return res.status(400).send(error.details[0].message);


    //  LOGICA:  DACAGASIREA 'CLIENTULUI':
    const client = await Client.findByIdAndUpdate(req.params.id, {
        nume: req.body.nume,
        esteAur: req.body.esteAur,
        telefon: req.body.phone
    }, { new: true });

    // LOGICA: DACA 'CURSUL NU EXISTA' -> RETURNAM '404' (RESURSA NU A FOST GASITA)
    // DACA 'NU EXISTA CLIENT' PT. UN 'ID' DAT:
    if (!client) return res.status(404).send('Clientul cu ID-ul dat nu a fost găsit.');

    // LOGICA: RETURNARE 'CLIENTULUI UPGRADAT' CLIENTULUI:
    res.send(client);
});
//----------------------------------------------------







//----------------------------------------------------
// RUTA 4: DELETE('/:ID')
//----------------------------------------------------
router.delete('/:id', async(req, res) => {

    // 'GASIREA & STERGEREA' DUPA 'ID':
    const client = await Client.findByIdAndRemove(req.params.id);


    // LOGICA '1.2': DACA 'ELEMENTUL CAUTAT' NU EXISTA - RETURNAM EROAREA '404'
    // DACA 'NU EXISTA CLIENT' PT. UN 'ID' DAT:
    if (!client)
        return res.status(404).send('Clientul cu ID-ul dat nu a fost găsit.');


    // LOGICA '2.2': RETURNAM 'RASPUNSULUI' CATRE 'CLIENT'
    res.send(client);
});
//----------------------------------------------------







//----------------------------------------------------
// RUTA 1.2: GET('/:ID') 
//----------------------------------------------------
router.get('/:id', async(req, res) => {

    // GASIREA UNUI SINGUR CLIENT DUPA ID:
    const client = await Client.findById(req.params.id);

    // DACA 'NU EXISTA CLIENT' PT. UN 'ID' DAT:
    if (!client)
        return res.status(404).send('Clientul cu ID-ul dat nu a fost găsit.');
    res.send(client);
});
//----------------------------------------------------






//----------------------------------------------------
// EXPORTARE OBIECTULUI 'ROUTER'
//----------------------------------------------------
module.exports = router;
______________________________________________________











 
 (2.1) In Folderul 'moduls'
	=> Cream Fieaierul 'modules/genuri.js':
______________________________________________________

// INCARCARI (IMPORTURI):
//----------------------------------------------------
// (IMP-4) IMPORTAREA 'JOI'
const Joi = require('joi');

//----------------------------------------------------
// (IMP-3) IMPORTAREA 'MONGOOSE'
const mongoose = require('mongoose');







//----------------------------------------------------
// CREAREA MODELULUI 'GEN' CU DEF. 'SCHEMEI':
//----------------------------------------------------
const Gen = mongoose.model('Gen', new mongoose.Schema({
    nume: {
        type: String,
        required: true,
        minlength: 5,
        maxlength: 50
    }
}));
//----------------------------------------------------







//----------------------------------------------------
// FUNC. 'VALIDAREGEN(GEN)'
//----------------------------------------------------
function validareGen(gen) {
    // LOGICA: VALIDARE CURS
    // DEF. 'SCHEMEI' = 'OBIECT':
    const schema = {
        nume: Joi.string().min(5).max(50).required()
    };


    // RETURNAREA - APELARI MET. 'VALIDATE()':
    return Joi.validate(gen, schema);
};
//----------------------------------------------------





//----------------------------------------------------
// EXPORTARE 
//----------------------------------------------------
exports.Gen = Gen;
exports.validare = validareGen;
______________________________________________________









(2.2) Modificam Fieaierul 'routes/genuri.js':
______________________________________________________

// INCARCARI (IMPORTURI):
//----------------------------------------------------
// (IMP-4) IMPORTAREA 'MODEL/GEN.JS'  
//         (RETURNEAZA '.Gen' SI '.validare')
const { Gen, valoare } = require('../models/genuri');

//----------------------------------------------------
// (IMP-3) IMPORTAREA 'MONGOOSE'
const mongoose = require('mongoose');

//----------------------------------------------------
// (IMP-1) IMPORTAREA MODULULUI 'EXPRESS'
const express = require('express');

//----------------------------------------------------
// (IMP-2) OBIECTUL 'ROUTER' - APELAREA FUNC. 'EXPRESS.RIUTER()'
const router = express.Router();




//----------------------------------------------------
// RUTA 1.1: '/'
// 'CITIREA' PRIN  MET. 'GET()':
//----------------------------------------------------
router.get('/', async(req, res) => {
    // RETURNARE 'GENURI' & 'SORTARE' DUPA 'NUME':
    const genuri = await Gen.find().sort('nume');

    // RASPUNSUL - MATRICE DE OBIECTE:
    res.send(genuri);
});
//----------------------------------------------------





//----------------------------------------------------
// RUTA 2: '/'
// 'CREAREA' PRIN MET. 'POST(URL, CALLBACK_FUNC(REQ, RES))' 
//----------------------------------------------------
router.post('/', async(req, res) => {

    // DESTRUCTURAREA OBIECTELOR - APELAREA FUNC. 'VALIDAREGEN()'
    const { error } = validare(req.body);

    // LOGICA:  DACA 'GENUL ESTE INVALID' -> RETURNAM '400' (CERERE ERONATA)
    // VERIFICAREA VALOAREI 'REZULTAT' -> A PROP. 'ERROR'
    if (error)
    //  RETURNAM 'EROAREA CU STATREA - 400' CATRE 'CLIENT':
        return res.status(400).send(error.details[0].message);


    // CREARE OBIECTUL 'GEN':
    let gen = new Gen({ nume: req.body.nume });


    //     // ADAUGAM OBIECTUL 'CURS' -> IN MATRICEA 'CURSURI':
    // SALVAREA IN BAZA DE DATE:
    gen = await gen.save();

    // RETURNAREA 'OBIECTULUI' CATRE 'CLIENT':
    res.send(gen);
});
// //----------------------------------------------------







///----------------------------------------------------
// RUTA 3: '/:ID'
// 'UPGRADARE' PRIN MET. 'PUT(URL, CALLBACK_FUNC(REQ, RES))' 
//----------------------------------------------------
router.put('/:id', async(req, res) => {
    const { error } = validare(req.body);

    // LOGICA:  DACA 'GENUL ESTE INVALID' -> RETURNAM '400' (CERERE ERONATA)
    // VERIFICAREA VALOAREI 'REZULTAT' -> A PROP. 'ERROR'
    if (error) return res.status(400).send(error.details[0].message);

    //  LOGICA:  DACAGASIREA 'GENULUI':
    const gen = await Gen.findByIdAndUpdate(req.params.id, { nume: req.body.nume }, {
        new: true
    });

    // LOGICA: DACA 'CURSUL NU EXISTA' -> RETURNAM '404' (RESURSA NU A FOST GASITA)
    // DACA 'NU EXISTA GEN' PT. UN 'ID' DAT:
    if (!gen) return res.status(404).send('Genul cu ID-ul dat nu a fost găsit.');

    // LOGICA: RETURNARE 'GENULUI UPGRADAT' CLIENTULUI:
    res.send(gen);
});
//----------------------------------------------------






///----------------------------------------------------
// RUTA 4: '/:ID'
// 'STERGEREA' PRIN MET. 'DELETE(URL, CALLBACK_FUNC(REQ, RES))' 
//----------------------------------------------------
router.delete('/:id', async(req, res) => {

    // 'GASIREA & STERGEREA' DUPA 'ID':
    const gen = await Gen.findByIdAndRemove(req.params.id);


    // LOGICA '1.2': DACA 'ELEMENTUL CAUTAT' NU EXISTA - RETURNAM EROAREA '404'
    // DACA 'NU EXISTA GEN' PT. UN 'ID' DAT:
    if (!gen)
        return res.status(404).send('Genul cu ID-ul dat nu a fost găsit.');


    // LOGICA '2.2': RETURNAM 'RASPUNSULUI' CATRE 'CLIENT'
    res.send(gen);
});
//----------------------------------------------------







//----------------------------------------------------
// RUTA 1.2: '/:ID' 
// 'CITIREA' PRIN MET. 'GET()'
//----------------------------------------------------
router.get('/:id', async(req, res) => {

    // GASIREA UNUI SINGUR GEN DUPA ID:
    const gen = await Gen.findById(req.params.id);

    // DACA 'NU EXISTA GEN' PT. UN 'ID' DAT:
    if (!gen)
        return res.status(404).send('Genul cu ID-ul dat nu a fost găsit.');
    res.send(gen);
});
//----------------------------------------------------







//----------------------------------------------------
// EXPORTARE 'ROUTER'
//----------------------------------------------------
module.exports = router;
______________________________________________________



