
	Testarea 'Middleware'-ului 'Auth.js'




   >> Testam separat Middleware-ul de Autorizare.



  (1) Cream Fisierul 'auth.test.js'  
	=> in Folder-ul 'tests / integration':
_____________________________________________________________________

const { User } = require('../../models/user');
const { Genre } = require('../../models/genre');
const request = require('supertest');

// SUITA DE TESTE PT. AUTORIZARE 'AUTH.MIDDLEWARE':
describe('auth iddleware', () => {

    // REFABRICAREA TESTELOR:
    // INAINTEA FIECARUI TEST:
    // PORNIRE 'SERVER' DIN 'INDEX.JS':
    beforeEach(() => { server = require('../../index'); })
        // DUPA FIECARUI TEST:
    afterEach(async() => {
        // STERGERE 'GENURI'
        await Genre.remove({});
        // INCHIDERE CONEXIUNE CU 'SERVER'-UL
        server.close();
    });

    // DECLARARE VARIABILE:
    let token;

    // FUNC. 'EXEC()'
    const exec = () => {
        // APELAM FUNC. 'REQUEST(SERVRT)'
        // ADAUGAREA OBIECTULUI '' IN COLECTIA 'GENURI':  
        return request(server)
            .post('/api/genres')
            // SETAM 'HEADER'
            .set('x-auth-token', token)
            .send({ name: 'genre1' });
    }

    // INAINTE DE FIECARE TEST    
    beforeEach(() => {
        // GENERAM 'TOKEN':
        token = new User().generateAuthToken();
    });

    // TEST 1 - 401 (DACA NU ESTE FURNIZAT UN 'TOKEN')
    it('should return 401 if no token is provided', async() => {
        // RESETARE 'SIR GOG': 
        token = '';

        // APELAREA FUNC. 'EXEC()' PT. REFABRICAREA TESTELOR
        const res = await exec();

        // ASTEPTAM CA 'STATUSUL RASPUNSULUI' AS 'FIE 401':
        expect(res.status).toBe(401);
    });

    // TEST 2 - 400 (DACA 'TOKEN'-UL  ESTE 'INVALID')
    it('should return 400 if token is invalid', async() => {
        // RESETARE TOKEN INVALID 
        token = 'a';

        // APELAREA FUNC. 'EXEC()' PT. REFABRICAREA TESTELOR
        const res = await exec();

        // ASTEPTAM CA 'STATUSUL RASPUNSULUI' AS 'FIE 400':
        expect(res.status).toBe(400);
    });

    // TEST 3 - 200 (DACA 'TOKEN'-UL  ESTE 'VALID')
    it('should return 200 if token is valid', async() => {

        // APELAREA FUNC. 'EXEC()' PT. REFABRICAREA TESTELOR
        const res = await exec();

        // ASTEPTAM CA 'STATUSUL RASPUNSULUI' AS 'FIE 200':
        expect(res.status).toBe(200);
    });
});
_____________________________________________________________________




 >> Afisare Test:
_____________________________________________________________________


 PASS  tests\integration\genres.test.js (10.936s)
  /api/genres
    GET /
      √ should return all genres (6197ms)
    GET /:id
      √ should return a genre if valid id is passed (40ms)
      √ should return 404 if invalid id is passed (7ms)
    POST /
      √ should return 401 if client is not logged in (54ms)
      √ should return 400 if genre is less than 5 characters (33ms)
      √ should return 400 if genre is more than 50 characters (12ms)
      √ should save the genre if it is valid (25ms)
      √ should return the genre if it is valid (12ms)

Test Suites: 4 passed, 4 total
Tests:       13passed, 13 total
Snapshots:   0 total
Time:        14.16s, estimated 15s
Ran all test suites.
_____________________________________________________________________



