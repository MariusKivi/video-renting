
	Validarea 'ObjectId'




  (1) Cream Testul 2 
	=> pentru Ruta 'GET /:id' 
	=> in Fisierul 'genuri.test.js'
_____________________________________________________________________

// TEST 2
        it('ar trebui să returneze 404 dacă este trecut un id invalid', async() => {

            // CREAM UN 'NOU GEN':
            const gen = new Gen({ nume: 'genul1' });
            // SALVAM GENUL:
            await gen.save();

            // RASPUNSUL = APELAREA SERVERULUI & PRELUAREA 'ID'-ULUI INVALID:
            const res = await request(server).get('/api/genuri/1');

            // ASTEPTAM CA 'STATUS'-UL SA 'FIE 404'
            expect(res.status).toBe(404);
        });
_____________________________________________________________________







 (2)  Adaugam Tipul de Date 'ObjectId' 
	=> in Fisierul 'routes/genuri.js'
	=> in Metoda 'router.get('/:id'),	
	=> altfel Ruta Nu Raspunde cu Statusul 404:
_____________________________________________________________________

   // DACA 'NU ESTE VALIDA' - APELAM TIPULUI 'OBJECTID' DIN 'MONGOOSE'
    if (!mongoose.Types.ObjectId.isValid(req.params.id))
        return res.status(404).send('ID-ul este invalid.');
____________________________________________________________________




 >> Afisarea Testului:
_____________________________________________________________________

 PASS  tests\integration\routes\genuri.test.js (5.984s)
  /api/genuri
    GET /
      √ ar trebui să returneze toate genurile (1364ms)
    GET /:id
      √ ar trebui să returneze un gen dacă este trecut un id valid (54ms)
      √ ar trebui să returneze 404 dacă este trecut un id invalid (15ms)

Test Suites: 2 passed, 2 total
Tests:       4 passed, 4 total
Snapshots:   0 total
Time:        10.25s
Ran all test suites.

Watch Usage: Press w to show more.
_____________________________________________________________________



