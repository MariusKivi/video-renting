
	Popularea 'Bazei de Date' - 'video-renting_test'




   >> Pentru a Popula Baza de Date 
	=> avem nevoie de Modelul 'gen'.


  (1.1) I,portam Modelul  'gen.js'
	=> in Fisierrul 'genuri.test.js' :
_____________________________________________________________________

// IMP. MODEL 'GEN/JS'
const { Gen } = require('../../../models/gen');
_____________________________________________________________________







  (1.2) Adaugam in Fisierul 'genuri.test.js' 
	=> In Func 'afterEach' --> 'Gen.remove()'
	=> adaugam in Test 1 'it()' -> Matricea 'Gen.collection.insertMany([])'
_____________________________________________________________________

// IMP. BIBLIOTECA 'SUPERTEST':
const request = require('supertest');
// IMP. MODEL 'GEN/JS'
const { Gen } = require('../../../models/gen');



// DECLARARE VARIABILA:
let server;



// 
// SUITA DE TEST 'DESCRIBE('/API/GENURI')':
describe('/api/genuri', () => {

    // FUNC. UTILITARA 'BEFOREEACH(CALLBACK)' DIN FK. 'JAST' & 'JESMIN'
    // PRIN CARE 'JEST' VA APELA ACEASTA FUNC. INAINTE DE FIECARE 'TEST'
    // SOLICITA 'PORNIREA SERVER'-ULUI:
    beforeEach(() => { server = require('../../../index'); })

    // FUNC. UTILITARA 'AFTEREACH(CALLBACK)' DIN FK. 'JAST' & 'JESMIN'
    afterEach(async() => {
        // SOLICITA 'OPRIREA SERVER'-ULUI::
        server.close();

        // STERGEREA 'TUTUROR GENURILOR' DIN COLECTIA 'GENURI':
        await Gen.remove({});
    });


    // (1.1) SUITA DE TEST: 'GET /'
    describe('GET /', () => {

        // TEST 1
        it('ar trebui să returneze toate genurile', async() => {

            // MATRICEA DE OBIECTE 'GENURI':
            // ADAUGAREA MAI MULTOR 'DOCUMENTE' IN 'MONGODB'
            // PRIN MET. 'INSERTMANY()':
            await Gen.collection.insertMany([
                { nume: 'genul1' },
                { nume: 'genul2' },
            ]);




            // PRELUAREA 'GENURILOR'
            const res = await request(server).get('/api/genuri');



            // ASTEPTAM CA 'STATUS'-UL SA 'FIE 200'
            expect(res.status).toBe(200);
            // ASTEPTAM CA 'LUNGIMEA' CORPULUI 'MATRICI' SA 'FIE 2':
            expect(res.body.length).toBe(2);

            // ASTEPTAM 'SA FIE ADEVARAT' 
            // CA 'UNUL' DINTRE 'ELEMENTE' SA 'FIE' = 'GENUL1':
            expect(res.body.some(g => g.nume === 'genul1')).toBeTruthy();

            // ASTEPTAM 'SA FIE ADEVARAT' 
            // CA 'UNUL' DINTRE 'ELEMENTE' SA 'FIE' = 'GENUL2':
            expect(res.body.some(g => g.nume === 'genul2')).toBeTruthy();

        });
    });
});
_____________________________________________________________________





 >> Afisare Test:
_____________________________________________________________________

 RUNS  tests/integration/routes/genuri.test.js

Test Suites: 1 passed, 1 of 2 total
Tests:       1 passed, 1 total
Snapshots:   0 total
 PASS  tests\integration\routes\genuri.test.js (6.894s)
  /api/genuri
    GET /
      √ ar trebui să returneze toate genurile (1585ms)

Test Suites: 2 passed, 2 total
Tests:       2 passed, 2 total
Snapshots:   0 total
Time:        11.249s
Ran all test suites.

Watch Usage: Press w to show more.
_____________________________________________________________________



