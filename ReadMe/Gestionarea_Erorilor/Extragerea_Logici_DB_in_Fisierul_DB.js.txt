
	Extragerea 'Logici DB' in Fisierul 'db.js'




  (1) In Folder-ul 'startup'
	=> Cream Fisierul 'db.js'
	=> in care Mutam Conectare 'mongoose.connect()'
	=> Importam 'Winston' pt. a Afisa prin el.
	=> Apelam 'Winston' in Metoda 'then()'
	=> Stergem Metoda 'catch()'
	=> Mutam Importul 'mongose' aici
	=> din 'index.js':
_____________________________________________________________________

// (IMP-12 IMPORTAREA  BIBLIOTECiI 'WINSTON'
//  ('IMPLICIT' ESTE PT. 'LOGAREA' - 'TRANSPORTULUI' IN 'CONSOLA'):
const winston = require('winston');
const mongoose = require('mongoose');



// EXPORTAM FUNCTIA ANONIMA:
module.exports = function()  {

    // CONECTAREA  LA  'BAZA DE DATE' - 'MONGODB':
    mongoose.connect('mongodb://localhost/video-renting')
        // 'PROMISIUNEA' - IN 'CAZ DE SUCCES':     
        .then(() => winston.info('Conectat cu succes la Baza de Date MongoDB'));   
}
_____________________________________________________________________







 (2) Importam in 'index.js' Fisierul 'startup/db.js':
_____________________________________________________________________

// (IMP-15 IMPORTAREA  MODULULUI 'STARTUP/DB':
require('./startup/db')();
_____________________________________________________________________








 (3) Fisierul 'index.js' ramanand:
_____________________________________________________________________

// (IMP-11 IMPORTAREA  MODULULUI 'EXPRESS-ASYNC-ERRORS':
require('express-async-errors');

// (IMP-12 IMPORTAREA  BIBLIOTECiI 'WINSTON'
//  ('IMPLICIT' ESTE PT. 'LOGAREA' - 'TRANSPORTULUI' IN 'CONSOLA'):
const winston = require('winston');

// (IMP-13 IMPORTAREA  BIBLIOTECiI 'WINSTON-MONGODB'
//'T 'INREGISTRAREA MESAJELOR' IN 'MONGODB':
require('winston-mongodb');

// (IMP-9) IMPORTAREA  MODULULUI 'CONFIG':
const config = require('config');

// (IMP-2) IMPORTAREA 'JOI'
const Joi = require('joi');

// (IMP-8) IMPORTAREA 'JOI-OBJECTID'
Joi.objectId = require('joi-objectid')(Joi);

const express = require('express');
const app = express();

// (IMP-14 IMPORTAREA  MODULULUI 'STARTUP/ROUTES':
require('./startup/routes')(app);
// (IMP-15 IMPORTAREA  MODULULUI 'STARTUP/DB':
require('./startup/db')();



// (VAR. 2) TRATAREA ERORILOR - 'UNCAUGHT  EXCEPTION' ('EXCEPTIE NEPRINSA')
// PRIN 'WINSTON' & MET. 'HANDLEEXCEPTION(OBIECT_DE_TRANSPORT)':
winston.handleExceptions(new winston.transports.File({ filename: 'uncaughtExceptin.log' }));




//__________________________________________________________________________
// (VAR. 2) TRATAREA 'PROMISIUNILOR RESPINSA NETRATATE' ('UNHANDLED PROMISE REJECTED'):
// PRIN OBIECTUL 'PROCESS' & MET. 'ON()'
// IN CARE 'ARUNCAM EXCEPTIA':
process.on('unhandledRejection', exception => {

    // ARUNCAREA UNEI 'EXCEPTII':
    throw exception;
});




// ____________________________________________________________________________
// APELAREA 'WINSTON'
//'TRANSPORT' PT 'INREGISTRAREA MESAJELOR' INTR-UN 'FISIER':
winston.add(winston.transports.File, { filename: 'logfile.log' });



// DACA DORIM DOAR SA 'AFISAM EROAREA' IN 'MONGODB'
// (2) FARA A 'STOCA MESAJUL INFORMATIV'
// ADAUGAM SI PROP. 'LEVEL'
winston.add(winston.transports.MongoDB, {
    db: 'mongodb://localhost/video-renting',
    level: 'error'
});




// ____________________________________________________________________________
// 'PROMISIUNEA RESPINSA' ('REJECTED PROMISE')
// CU MET. '.REJECT(OBIECT_ERROR())'
const p = Promise.reject(new Error('Ceva a eÈ™uat lamentabil.'));

// APELAREA 'PROMISIUNI'
// NU APELAM MET. 'CATCH()' PT. 'GESTIONAREA RESPINGERI'
// AVEM O 'RESPINGERE NETRATATA / SOLUTIONATA' (UNHANDLED):
p.then(() => console.log('Terminat'));



// ____________________________________________________________________________
// CONDITIE:
if (!config.get('cheiaPrivataJWT')) {

    // AFISAREA 'ERORI':
    console.error('EROARE FATALA: cheiaPrivataJWT nu este definita.');

    // IESIREA DIN OBIECTUL GLOBAL - 'PROCESS'
    // MET. 'EXIT(0 = SUCCES, ALT_NR = ESEC)':
    process.exit(1);
}



// ____________________________________________________________________________
// VARIABILA 'ENVIRONMENT' - 'PORT'  SAu  PORTUL '3000':
// (IN OBIECTUL GLOBAL 'PROCESS', IN PROP. 'ENV')
const port = process.env.PORT || 3000;


// ____________________________________________________________________________
// MET. 'LISTEN(NR_PORT, CALLBACK FUNC*())' 
// ASCULTAREA 'VARIABILEI ENVIRONMENT':
app.listen(port, () => {
    // 'TEMPLATE  STRING' (PRIN UTIL. 'BACKTICK')
    console.log(`Port de Ascultare ${port}...`);
});
_____________________________________________________________________







  (4) Pornim Aplicatia:
_____________________________________________________________________

	node index.js
_____________________________________________________________________
 


  >> Afisarea in Terminal:
_____________________________________________________________________

_(node:10812) DeprecationWarning: current URL string parser is deprecated, and will be removed in a future version. To use the new parser, pass option { useNewUrlParser: true } to MongoClient.connect.
(node:10812) [MONGODB DRIVER] Warning: Current Server Discovery and Monitoring engine is deprecated, and will be removed in a future version. To use the new Server Discover and Monitoring engine, pass option { useUnifiedTopology: true } to the MongoClient constructor.
Port de Ascultare 3000...
(node:10812) DeprecationWarning: collection.ensureIndex is deprecated. Use createIndexes instead.
info: Conectat cu succes la Baza de Date MongoDB
____________________________________________________________________




